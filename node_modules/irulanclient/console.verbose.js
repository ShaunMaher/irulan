// Extend the "console" object to include some extra logging functions
console.verbose = function Verbose(message, object) {
  var caller = '';
  var callingObject = '';
  var callingFunction = '';
  var callingPage = '';
  var callingPageIndex = 1;
  var prefix = '';

  // We deliberately throw an error so the browser generates a stack dump
  try {
    throw new Error();
  }
  catch (err) {
    // Take some information from the stack dump in the err object and format it
    //  for nice output in the console.log
    caller = err.stack.split("\n")[2].split("at ")[1];
    callingObject = caller.split(" ")[0];

    if (callingObject == "new") {
      callingObject = caller.split(" ")[1];
      callingPageIndex++;
    }
    if (caller.split(" ")[1] == "[as") {
      //Do I still need this?
      //callingFunction = (caller.split(" ")[2]).replace("]", "");
      callingPageIndex += 2;
    }
    callingObject = callingObject.replace(/\$/g, ".");
    callingObject = callingObject.replace(/^Object\./, "");
    callingObject = callingObject.replace(/^Function\./, "");
    callingFunction = callingFunction.replace(/\$/g, ".");

    if ((callingObject.match(/^http:\/\//)) || (callingObject.match(/^http:\/\//))) {
      prefix = caller.split(" ")[0].split(/[\\/]/).pop().split(":");
      prefix = prefix[0] + " (line: " + prefix[1] + ")";
      callingPageIndex = 0;
    }
    else if ((callingFunction.length > 0) && (callingObject.length > 0)) {
      prefix = callingObject + "." + callingFunction;
    }
    else if ((callingFunction.length < 1) && (callingObject.length > 0)) {
      prefix = callingObject;
    }
    else {
      prefix = '<anonymous>';
    }

    callingPage = caller.split(" ")[callingPageIndex];
    if (!callingPage.match(/http/)) {
      console.log(callingPageIndex + ' ' + caller);
    }
    callingPage = callingPage.split(" ")[0].split(/[\\/]/).pop().split(":")[0];

    //console.log("err object: %O", err.stack.split("\n"));
    if (object) {
      console.log(object);
    }
  }

  /* Example of err.stack
  Error
    at Console.Debug (http://172.30.1.196:3000/irulanclient.js:8:11)
    at DemoCtrl.AppsMenu$menuItemClick [as menuItemClick] (http://172.30.1.196:3000/irulanclient.js:194:15)
    at fn (eval at <anonymous> (http://172.30.1.196:3000/angular.min.js:213:110), <anonymous>:4:373)
    at e (http://172.30.1.196:3000/angular.min.js:254:74)
    at r.$eval (http://172.30.1.196:3000/angular.min.js:133:313)
    at r.$apply (http://172.30.1.196:3000/angular.min.js:134:17)
    at HTMLButtonElement.<anonymous> (http://172.30.1.196:3000/angular.min.js:254:126)
    at If (http://172.30.1.196:3000/angular.min.js:35:367)
    at HTMLButtonElement.Hf.d (http://172.30.1.196:3000/angular.min.js:35:314)
  */

  if (typeof message == 'string') {
    formattedMessage = prefix + ": %s";
  }
  else if (typeof message == 'object') {
    formattedMessage = prefix + ": %O";
  }
  else {
    console.log("console.verbose: I don't know how to properly format this message (" + (typeof message) + "): " + JSON.stringify(message));
    formattedMessage = prefix + ": %s";
  }

  // If there are any "filterObjects" defined then we should output only if this
  //  callingObject is in that array.
  var showMessage = false;
  if (console.verbose.filterObjects.enabled) {
    for (var index in console.verbose.filterObjects) {
      if (typeof console.verbose.filterObjects[index] == 'object') {
        if (JSON.stringify(console.verbose.filterObjects[index].constructor.toString().match(/RegExp/))) {
          if ((callingObject.match(console.verbose.filterObjects[index])) || (callingPage.match(console.verbose.filterObjects[index]))) {
            showMessage = true;
          }
        }
      }
      if (typeof console.verbose.filterObjects[index] == 'string') {
        if ((console.verbose.filterObjects[index] == callingObject) || (console.verbose.filterObjects[index] == callingPage)) {
          showMessage = true;
        }
      }
    }
  }
  else {
    showMessage = true;
  }

  if (showMessage) {
    console.log(formattedMessage, message);
  }
}

// Add filter rules to this array.  Values can either be RegExp objects or
//  strings.  Strings must match the whole callingObject value that the verbose
//  function generates or the whole callingPage value.  This is mainly useful
//  for page file names, otherwise, use RegExps instead.  They are far more
//  flexible (but probably slightly slower).
console.verbose.filterObjects = [];

// Set to true to enable filtering or false to output all messages
console.verbose.filterObjects.enabled = false;
