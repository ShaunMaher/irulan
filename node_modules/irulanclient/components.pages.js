irulanclient.directive('pages', function() {
  console.log("pages directive")
  return {
    restrict: 'E',
    transclude: true,
    template:
      '<div id="pagesworkspace">'+
      '  <div ng-repeat="(name, page) in pages">'+
      '    <page ng-pagename="{{name}}">{{name}}</page>'+
      '    <ng-transclude></ng-transclude>'+
      '  </div>'+
      '</div>',
  }
})

irulanclient.directive('page', ['$filter', '$timeout', '$compile', function($filter, $timeout, $compile) {
  return {
    restrict: 'E',
    link: function($scope, $element, $attrs, controller, $transclude) {
      console.log('inject page!');
      if (!$transclude) {
        throw minErr('ngTransclude')('orphan',
          'Illegal use of ngTransclude directive in the template! ' +
          'No parent directive that requires a transclusion found. ' +
          'Element: {0}',
          startingTag($element)
        );
      }

      var page = $scope.pages[$attrs['ngPagename']];
      console.log($filter('pageRenderer')(page));
      console.log($element)
      //$element[0].innerHTML = $filter('pageRenderer')(page);

      var context = {
        page: page,
        pagename: $attrs['ngPagename'],
        scope: $scope,
        element: $element,
        attrs: $attrs,
        filter: $filter,
        controller: controller,
        transclude: $transclude
      }
      $scope.$watch(
        (function() {
          return JSON.stringify($scope.pages[context.pagename]);
        }).bind(context),
        (function() {
          //window.setTimeout(
          $timeout((function() {
            console.log("page update detected");

            // If we were to simply push the new HTML content into
            //  element[0].innerHTML then any directives it contains (e.g.
            //  "<warning>some text</warning>") would not get processed.
            //  Instead the new content is passed back through the compiler for
            //  further AngularJS processing.  Talking directly to the DOM
            //  (.innerHTML attribute) hides the update from AngularJS.
            var template = $filter('pageRenderer')(context.page);
            var linkFunction = $compile(template);
            var content = linkFunction(context.scope);
            context.element.empty();
            context.element.append(content);

          }).bind(context), 1, true);
        }).bind(context)
      )
    }
  }
}])

irulanclient.directive('warning', function() {
  console.log("warning directive")
  return {
    restrict: 'E',
    transclude: true,
    template:
      '<md-content class="md-warn">'+
      '<ng-transclude></ng-transclude>'+
      '</md-content>',
  }
})

// Empty template for a "Page" object
irulanclient.factory('Page', function() {
  function Page() {
    this.name = '';
    this.title = 'Loading';
    this.sourceFormat = 'txt';
    this.content = 'empty content here';
  }
  //Page.prototype = {
  //  test: function() {
  //    return this.name;
  //  }
  //}
  return (Page);
})

// Register our ability to handle page requests in the "wiki/" name space
irulanclient.run(['WorkspaceProviders', 'Page', 'Pages', function(WorkspaceProviders, Page, Pages) {
  // How can I push the factory?
  WorkspaceProviders.push({
    namespace: null,
    factory: Page,
    workspace: Pages,
  });
}]);

irulanclient.service('Pages', ['Page', 'WorkspaceProviders', '$resource', function(Page, WorkspaceProviders, $resource){
  //this.Page = Page
  this.pages = {};

  console.log("Pages: WorkspaceProviders: " + JSON.stringify(WorkspaceProviders));

  this.get = function(options, callback) {
    for (index in WorkspaceProviders) {
      WorkspaceProvider = WorkspaceProviders[index];
      //console.log(PageNamespaceProvider);
      if (WorkspaceProvider.namespace) {
        if (options.name.substring(0, WorkspaceProvider.namespace.length) == WorkspaceProvider.namespace) {
          console.log(WorkspaceProvider.namespace + ' can handle the request for ' + options.name);
          console.log(WorkspaceProvider);
          var newPage = WorkspaceProvider.factory;
          return newPage.get(options, callback)
        }
      }
    }
    //TODO: work out what will happen if this happens
    return false;
  }

  this.show = function(options, $scope, callback) {
    console.log("Show Pages scope:")
    console.log($scope);

    //TODO: unhide the pagesworkspace div

    //TODO: I think that if we specifically target the correct
    //  NameSpaceProvider's own array of pages then we can have multiple apps
    //  using the common "Pages" provider with the actual pages for that
    //  namespace shown.
    $scope.pages = this.pages;

    $scope.pages[options.name] = this.get(options, function () {
      console.log("Show pages callback");
      callback();
    });
  }

  this.hide = function() {
    //TODO: hide the pagesworkspace div
  }

  this.new = function() {
    return new Page;
  }
}])

// This filter takes a "page" object and runs it through the appropraite
//  functions to convert it from Markdown/Wiki Syntax, etc to HTML
irulanclient.filter('pageRenderer', ['$filter', 'SourceRenderers', 'Pages', function($filter, SourceRenderers, Pages) {
  return function(page) {
    // The provided page might actually be just a pointer (alias) to another
    //  page
    if (page.alias) {
      //TODO
    }

    if (page.sourceFormat) {
      if (page.sourceFormat == null) {
        return page.content
      }

      var rendered = false;
      for (index in SourceRenderers) {
        SourceRenderer = SourceRenderers[index];
        if (SourceRenderer.sourceFormat == page.sourceFormat) {
          console.log('Using ' + SourceRenderer.name);
          page.renderedHtml = $filter(SourceRenderer.name)(page);
          rendered = true;
        }
      }
      if (!rendered) {
        page.renderedHtml = "I don't know how to render this page: " + JSON.stringify(page);
      }

      var html = '<div style="margin-left: 1em; margin-right: 1em;" class="panel panel-primary">';
      //if (page.title != null) {
      // html = html + '<div class="panel-heading">' +
      //   '<h3 class="panel-title">' +
      //   page.title +
      //   '<span style="float: right; margin-top: -0.3em;">' +
      //     '<button type="button" class="close" style="padding-left: 0.4em; font-size: 150%; color: white;" data-dismiss="modal" aria-hidden="true">&#x2715;</button>' +
      //     '<button type="button" class="close" style="padding-left: 0.4em; font-size: 150%; color: white;" data-dismiss="modal" aria-hidden="true">&#x23bd;</button>' +
      //   '</span>' +
      //   '</h3></div>';
      // //}
      // html = html + '<div class="panel-footer"> test' +
      // '<span style="float: right; margin-top: -0.3em;">' +
      //   '<button type="button" class="close" style="padding-left: 0.4em; font-size: 150%;" data-dismiss="modal" aria-hidden="true">&#x21BB;</button>' +
      //   '<button type="button" class="close" style="padding-left: 0.4em; font-size: 190%;" data-dismiss="modal" aria-hidden="true">&#xE207;</button>' +
      // '</span>' +
      // '</div>' +
      // '<div class="panel-body">' + page.renderedHtml + '</div></div>';
      html += '<md-card class="md-whiteframe-9dp">';
      html += '      <h1 style="position: absolute;">' + page.title + '</h1>';
      //html += '<img ng-src="http://demo.geekslabs.com/materialize/v2.1/layout01/images/user-profile-bg.jpg" class="md-card-image" alt="Washed Out" style="height: 64px; opacity: 0.5; position: absolute; width: 100%">';
      //html += '  <md-card-header style="background-color: #f1f1f1;">';
      //html += '    <md-card-avatar>';
      //html += '      <img src="img/logo.svg"/>';
      //html += '    </md-card-avatar>';
      //html += '    <md-card-title-text>';
      //html += '      <span class="md-title">' + page.title + '</span>';
      //html += '    </md-card-title-text>';
      //html += '<md-toolbar layout="row" class="md-primary">';
      //html += '<div class="md-toolbar-tools">';
      //html += '<h1><span>' + page.title + '</span></h1>';
      //html += '</div>';
      html += '<md-fab-toolbar class="md-small-fab-toolbar" md-open="demo.isOpen" count="demo.count" md-direction="left" old-md-theme="docs-dark">';
      //html += '    <md-card-title-text>';
      //html += '      <span class="md-title" style="display: inline; float: left;"><h1>' + page.title + '</h1></span>';
      //html += '    </md-card-title-text>';
      html += '  <md-fab-trigger class="align-with-text">';
      html += '    <md-button aria-label="menu" class="md-fab md-hue-2 md-fab-small" old-style="width: 35px; height: 35px;">';
      html += '      <md-icon><i class="zmdi zmdi-menu zmdi-hc-lg"></i></md-icon>';
      html += '    </md-button>';
      html += '  </md-fab-trigger>';
      html += '  <md-toolbar>';
      html += '    <md-fab-actions class="md-toolbar-tools">';
      html += '      <md-button aria-label="comment" class="md-icon-button">';
      html += '        <md-icon><i class="zmdi zmdi-edit zmdi-hc-lg"></i></md-icon>';
      html += '      </md-button>';
      html += '      <md-button aria-label="label" class="md-icon-button">';
      html += '        <md-icon><i class="zmdi zmdi-label zmdi-hc-lg"></i></md-icon>';
      html += '      </md-button>';
      html += '      <md-button aria-label="photo" class="md-icon-button">';
      html += '        <md-icon><i class="zmdi zmdi-code zmdi-hc-lg"></i></md-icon>';
      html += '      </md-button>';
      html += '    </md-fab-actions>';
      html += '  </md-toolbar>';
      html += '</md-fab-toolbar>';

      html += '  </md-card-header>';

      html += '  <md-card-content>' + page.renderedHtml + '</md-card-content>';
      html += '</md-card>';
      html += '</div>';
      return html;
    }
    else {
      console.log("Rendering page raw since it has no sourceFormat")
      return page
    }
  }
}])
