var irulanclient = angular.module('IrulanClient', ['ngResource', 'ngMaterial'])
  .config(function($locationProvider) {
    $locationProvider.html5Mode(true).hashPrefix('!');
  })

  .config(function($mdThemingProvider) {
    // Configure a dark theme with primary foreground yellow
    var testTheme = $mdThemingProvider.theme('docs-dark', 'default')
      .primaryPalette('blue-grey')
      .dark();
    console.log(testTheme);
    console.log($mdThemingProvider);
    console.log(testTheme.colors.primary.name);
    console.log($mdThemingProvider._PALETTES[testTheme.colors.primary.name]['100']);
  })

  // An array of filter names and the "sourceTypes" they can handle.  For
  //  example:
  //    {
  //      sourceFormat: 'md',
  //      name: 'markdownRenderer'
  //    }
  .value('SourceRenderers', Array())

  // An array of installed "apps" and their capibilities
  .value('Apps', Array())

  // An array of Page Namespaces and the factories that can create them.  Not yet finished.
  .value('WorkspaceProviders', Array())
  //
  .service('Workspaces', ['WorkspaceProviders', function(WorkspaceProviders){
    this.switch = function(options, $scope, callback) {
      for (index in WorkspaceProviders) {
        WorkspaceProvider = WorkspaceProviders[index];
        if (WorkspaceProvider.namespace) {
          console.log(WorkspaceProvider);
          if (options.name.substring(0, WorkspaceProvider.namespace.length) == WorkspaceProvider.namespace) {
            console.log(WorkspaceProvider.namespace + ' can handle the request for ' + options.name);
            WorkspaceProvider.workspace.show(options, $scope, callback);
            //var newPage = WorkspaceProvider[0].factory;
            //return newPage.get(options, callback)
          }
        }
      }
    }
  }])

  //.run(['Apps', function(Apps) {
  //  Apps.push({
  //    name: 'irulanlauncherpage',
  //    enabled: true,
  //    launcher: {
  //      enabled: false,
  //    },
  //    // Each application will have the ability to specify some colors that will
  //    //  be applied to the global CSS (e.g. Navbar color) so the user has a clear
  //    //  indication that they have move to a new app
  //    theme: {
  //      colors: {
  //        color_1: '#FFFFFF',
  //        color_2: '#000000',
  //      },
  //      // The application can also have it's own background image (wallpaper)
  //      background: {
  //        image: 'some url',
  //        color: '#FFFFFF',
  //      },
  //    }
  //  })
  //}])

  // This controller controls the startup state of the application
  .controller('WorkspacesController', ['$scope', '$location', 'Workspaces', 'Apps', function($scope, $location, Workspaces, Apps) {
    console.log($scope);

    irulanclient.show_launcher = function() {
      console.log("show_launcher");
      console.log($scope);

      $scope.$broadcast("show_launcher", {})
    };

    //TODO: Move this to a .value? item
    $scope.homePage = 'wiki/home';

    //$scope.pages = Pages.pages;

    $scope.cards = {};
    $scope.cards['carda'] = {name: 'card a'};

    console.log($location.path());

    //var newpage = Pages.new();
    //$scope.pages['start'] = newpage;

    //$scope.pages['wiki/home'] = Pages.get({ name: 'wiki/home' }, function(page) {
    //  console.log(page);
    //  //$scope.pages['wikipage:home'] = page;
    //})

    // Whenever a relative link is clicked AngularJS updates the browser's
    //  address bar and broadcasts a "$locationChangeStart" event.  We need to
    //  listen for this event so we know when to load a new page.  This event
    //  also fires on startup so we use it to load the initial page.
    $scope.$on('$locationChangeStart', function(event, next, current) {
      console.log(Workspaces);
      var newpage = $location.path();
      newpage = newpage.replace(/^\//, "");
      if (newpage.length < 1) {
        newpage = $scope.homePage;
      }

      Workspaces.switch({ name: newpage }, $scope, function() {
        console.log("do I need a callbeck function?");
      })

      //if(!(newpage in Pages.pages)) {
      //  console.log("Load page not previously loaded: " + newpage);
      //  Pages.pages[newpage] = Pages.get({ name: newpage }, function(page) {
      //    console.log(Pages.pages);
      //  });
      //}
    });

    $scope.$on("show_launcher", function(event) {
      console.log("show_launcher event");
      console.log(Apps);

      $scope.cards['card1'] = {name: 'card 1'};

      // Calling $digest makes the watchers reevaluate what they are watching.
      //  Without this no one notices that the cards array has been updated and
      //  the replacement cards are not applied
      $scope.$digest();
    });
  }])

  .controller('AppsMenu', ['$mdDialog', 'Apps', '$scope', function DemoCtrl($mdDialog, Apps, $scope) {
    $scope.Apps = Apps
    this.openMenu = function($mdOpenMenu, ev) {
      originatorEv = ev;
      $mdOpenMenu(ev);
    };
  }])

  .controller('AccountsMenu', ['$mdDialog', function DemoCtrl($mdDialog) {
    this.openMenu = function($mdOpenMenu, ev) {
      originatorEv = ev;
      $mdOpenMenu(ev);
    };
  }]);
