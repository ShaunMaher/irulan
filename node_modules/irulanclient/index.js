var fs = require("fs");
var path = require("path");
module.app = {};

module.exports = SinglePageApplication;
module.exports.IndexPage = IndexPage;
module.exports.ErrorPage = ErrorPage;
module.exports.InjectClientScripts = InjectClientScripts;
module.exports.InjectClientCSS = InjectClientCSS;

// Constructor
function SinglePageApplication(_app, router) {
  //console.log(module.app);
  //console.log(this.app);
  app = module.app = _app;
  //console.log(this.app);

  // Override the default views directory with the one this module provides
  app.Settings['default views directory'] = app.Settings['views directory'];
  app.Settings['views directory'] = app.Settings['node modules directory'] + '/' + app.Settings['index page module name'] + '/views/';

  // Inject the client side scripts we'll need
  app.ClientScripts['single page application'].push({
    name: 'angular.min.js',
    online_url: '//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js',
    //offline_path: app.Settings['cachedJsDir'] + '/angular.min.js'
  })
  app.ClientScripts['single page application'].push({
    name: 'angular-animate.min.js',
    online_url: '//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-animate.min.js',
    //offline_path: app.Settings['cachedJsDir'] + '/angular.min.js'
  })
  app.ClientScripts['single page application'].push({
    name: 'angular-aria.min.js',
    online_url: '//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-aria.min.js',
    //offline_path: app.Settings['cachedJsDir'] + '/angular.min.js'
  })
  app.ClientScripts['single page application'].push({
    name: 'angular-messages.min.js',
    online_url: '//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-messages.min.js',
    //offline_path: app.Settings['cachedJsDir'] + '/angular.min.js'
  })
  app.ClientScripts['single page application'].push({
    name: 'angular-material.min.js',
    online_url: '//ajax.googleapis.com/ajax/libs/angular_material/1.0.0/angular-material.min.js',
    //offline_path: app.Settings['cachedJsDir'] + '/angular.min.js'
  })

  // I don't think I ended up using these
  // app.ClientScripts['single page application'].push({
  //  name: 'angular-sanitize.min.js',
  //  online_url: '//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-sanitize.min.js',
  //  offline_path: app.Settings['cachedJsDir'] + '/angular-sanitize.min.js'
  // })
  // app.ClientScripts['single page application'].push({
  //  name: 'angular-route.min.js',
  //  online_url: '//cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.8/angular-route.min.js',
  //  offline_path: app.Settings['cachedJsDir'] + '/angular-route.min.js'
  // })
  // app.ClientScripts['single page application'].push({
  //  name: 'jquery.min.js',
  //  online_url: '//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js',
  //  offline_path: app.Settings['cachedJsDir'] + '/jquery.min.js'
  // })
  //app.ClientScripts['single page application'].push({
  //  name: 'bootstrap.min.js',
  //  online_url: '//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js',
  //  offline_path: app.Settings['cachedJsDir'] + '/bootstrap.min.js'
  //})

  app.ClientScripts['single page application'].push({
    name: 'angular-resource.min.js',
    online_url: '//cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.8/angular-resource.min.js',
    //offline_path: app.Settings['cachedJsDir'] + '/angular-resource.min.js'
  })
  app.ClientScripts['single page application'].push({
    name: 'console.verbose.js',
    offline_path: app.Settings['node modules directory'] + '/' + app.Settings['index page module name'] + "/console.verbose.js"
  })
  app.ClientScripts['single page application'].push({
    name: 'irulanclient.js',
    offline_path: app.Settings['node modules directory'] + '/' + app.Settings['index page module name'] + "/irulanclient.js"
  })
  //app.ClientScripts['single page application'].push({
  //  name: 'app.js',
  //  generate: function() {
  //    console.log('app.js needs certain dynamic adjustments depending on which plugins are enabled.');
  //    return ""
  //  }
  //})

  // Deprecated/To be replaced
  //app.ClientScripts['single page application'].push({
  //  name: 'components.navbar.js',
  //  offline_path: app.Settings['clientJsDir'] + '/components.navbar.js'
  //})

  app.ClientScripts['single page application'].push({
    name: 'components.pages.js',
    offline_path: app.Settings['node modules directory'] + '/' + app.Settings['index page module name'] + '/components.pages.js'
  })
  app.ClientScripts['single page application'].push({
    name: 'components.cards.js',
    offline_path: app.Settings['node modules directory'] + '/' + app.Settings['index page module name'] + '/components.cards.js'
  })

  // Deprecated/To be replaced
  //app.ClientScripts['single page application'].push({
  //  name: 'components.cards.js',
  //  offline_path: app.Settings['node modules directory'] + '/' + app.Settings['index page module name'] + '/components.cards.js'
  //})

  // Inject the client side CSS we'll need
  //app.ClientCSS['single page application'].push({
  //  name: 'bootstrap.min.css',
  //  online_url: 'https://maxcdn.bootstrapcdn.com/bootswatch/3.3.6/paper/bootstrap.min.css',
  //  offline_path: app.Settings['cachedCssDir'] + '/bootstrap.min.css'
  //})
  app.ClientCSS['single page application'].push({
    name: 'angular-material.min.css',
    online_url: 'https://ajax.googleapis.com/ajax/libs/angular_material/1.0.0/angular-material.min.css',
    //offline_path: app.Settings['cachedCssDir'] + '/bootstrap.min.css'
  })
  app.ClientCSS['single page application'].push({
    name: 'material-design-iconic-font.min.css',
    online_url: 'https://cdnjs.cloudflare.com/ajax/libs/material-design-iconic-font/2.2.0/css/material-design-iconic-font.min.css',
    //offline_path: app.Settings['cachedCssDir'] + '/bootstrap.min.css'
  })

  // Deprecated/To be replaced
  //app.ClientCSS['single page application'].push({
  //  name: 'material-extras.css',
  //  offline_path: app.Settings['node modules directory'] + '/' + app.Settings['index page module name'] + '/material-extras.css'
  //})

  // Register the fact that we will be handling requests for "/" (i.e.
  //  index.html)
  router.get("/", function (req, res, next) {
    console.log(next);
    IndexPage(req, res, next);
  });

  // We also want a chance to provide any ".js" files the client requests
  router.get(/\.js$/, function (req, res, next) {
    //console.log(".js file request: " + req._parsedUrl.path)
    SendScript(req, res, next);
  });

  // We also want a chance to provide any ".js" files the client requests
  router.get(/\.css$/, function (req, res, next) {
    //console.log(".js file request: " + req._parsedUrl.path)
    SendCSS(req, res, next);
  });
}

function InjectClientCSS() {
  return InjectClientScriptsOrCSS(app.ClientCSS['single page application'], '<link rel="stylesheet" href="{{url}}">');
}

function InjectClientScripts() {
  return InjectClientScriptsOrCSS(app.ClientScripts['single page application'], '<script src="{{url}}"></script>');
}

// Take all of the objects in "Settings['client scripts']" and generate
//  the HTML that needs to be injected into the HTML page.
function InjectClientScriptsOrCSS(objects, template) {
  var app = module.app;

  var html = '';
  for (index in objects) {
    object = objects[index];
    if (("generate" in object)) {
      html += '<script src="/' + object.name + '"></script>\n';
    }
    else if (app.Settings['offline mode']) {
      if (!("offline_path" in object)) {
        if (("online_url" in object)) {
          console.log('We are in offline mode but no offline path for "' + object.name + '" is provided.');
          html += template.replace(/{{url}}/i, object.online_url) + '\n';
          //html += '<script src="' + object.online_url + '"></script>\n';
        }
        else {
          console.log('Neither an online_url or offline_path was available for "' + object.name + '".');
        }
      }
      else {
        html += template.replace(/{{url}}/i, '/' + object.name) + '\n';
        //html += '<script src="/' + object.name + '"></script>\n';
      }
    }
    else if (("online_url" in object)) {
      html += template.replace(/{{url}}/i, object.online_url) + '\n';
      //html += '<script src="' + object.online_url + '"></script>\n';
    }
    else if (("offline_path" in script)) {
      html += template.replace(/{{url}}/i, '/' + object.name) + '\n';
      //html += '<script src="/' + object.name + '"></script>\n';
    }
    else {
      console.log('Neither an online_url or offline_path was available for "' + object.name + '".');
    }
  }
  return html;
}

function SendCSS(req, res, next) {
  var app = module.app;
  SendScriptOrCSS(req, res, next, app.ClientCSS['single page application']);
}

function SendScript(req, res, next) {
  var app = module.app;
  SendScriptOrCSS(req, res, next, app.ClientScripts['single page application']);
}

function SendScriptOrCSS(req, res, next, objects) {
  var app = module.app;
  var objectSent = false;

  //TODO: This always goes to "next()".  Finish writing it!
  requestedObject = path.basename(req._parsedUrl.path);
  if (requestedObject == 'all.js') {
    //TODO: merge all of the script files into one and send
  }
  else {
    for (index in objects) {
      object = objects[index];
      if (object.name == requestedObject) {
        if (("generate" in object)) {
          console.log('Should generate file from using generate() function but this is not implemented yet');
        }
        else {
          console.log('Sending file from ' + object.offline_path);
          res.sendFile(object.offline_path);
          objectSent = true;
          return true;
        }
      }
    }
  }
  if (!objectSent) {
    next();
  }
}

function IndexPage(req, res, next) {
  var app = module.app;

  console.log("IndexPage");
  console.log(next);
  //res.sendFile(app.Settings['views directory'] + "index.html");
  SendPage(req, res, next);
}

function SendPage(req, res, next) {
  var app = module.app;
  var context = [];
  context.req = req;
  context.res = res;
  context.next = next;

  context.pageName = path.basename(req._parsedUrl.path);
  context.fileName = app.Settings['views directory'] + "/index.html";
  fs.access(context.fileName, fs.R_OK, (function (err) {
    if (err) {
      console.log("Page not found: '" + this.fileName + "'");
      this.next();
    }
    else {
      console.log("Sending page from: '" + this.fileName + "'");
      fs.readFile(context.fileName, 'utf8', (function(err, data) {
        if (err) {
          console.log("Error reading page from: '" + context.fileName + "'")
          context.next();
          return;
        }

        // Inject client scripts, css, etc.
        data = data.replace(/{{ClientScripts}}/i, InjectClientScripts());
        data = data.replace(/{{ClientCSS}}/i, InjectClientCSS());

        context.res.send(data);
      }).bind(context));
    }
  }).bind(context));
}

function ErrorPage(req, res, error_num, error_text) {
  var app = module.app;

  //TODO: Add friendly error message support
  res.sendStatus(error_num);
  console.log('Sending error response ' + error_num + ' in response to a request for "' + req._parsedUrl.path + '"');
  //res.sendFile(app.Settings['views directory'] + "404.html");
}
