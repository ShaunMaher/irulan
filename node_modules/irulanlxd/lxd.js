"use strict";
var fs = require("fs");
var path = require("path");
module.app = {};

var LXCHost = class {
  constructor (name) {
    this.IPs = {};
    this.name = name;
    this.containers = new LXCContainers();
  }
  LXDApiPing(callback) {

  }
  IrulanApiPing(callback) {

  }
  IcmpPing(callback) {

  }
}

var LXCHosts = class {
  constructor() {
    this.hosts = {}
  }
  add(_LXCHost) {
    if (_LXCHost instanceof LXCHost) {
      this.hosts[_LXCHost.name] = _LXCHost;
      return true;
    }
    else {
      console.log("Not a LXCHost object");
    }
  }
}
LXCHosts.prototype.toString = function(){return JSON.stringify(this.hosts)};
LXCHosts.prototype.valueOf = function(){return JSON.stringify(this.hosts)};

function LXCContainer(name) {
  this.name = name;
  this.IPs = {};
  this.IPs.IPv4 = {};
  this.IPs.IPv6 = {};
  this.Running = false;
}

function LXCContainers() {
  this.containers = {};
  this.valueOf = function() { return this.containers };
  this.toString = function() { return JSON.stringify(this.containers) }
}

var LXDManagementServer = class {
  constructor (_app, router) {
    console.log("LXDManagementServer starting up.");

    // If an "_app" object was passed, use it.  Otherwise create a new empty
    //  object
    if (_app) {
      this.app = module.app = _app;
    }
    else {
      this.app = {};
    }

    // Load the localStorage module if there isn't one built in and "_app"
    //  didn't provide one.
    if (typeof this.app.localStorage === "undefined" || this.app.localStorage === null) {
      if (typeof localStorage === "undefined" || localStorage === null) {
        this.localStorage = new require('node-localstorage').LocalStorage('./conf/');
      }
      else {
        this.localStorage = localStorage;
      }
    }
    else {
      this.localStorage = app.localStorage;
    }

    // Init some local objects
    this.UpdateNodeStatusTimer = {};
    this.LXCHosts = new LXCHosts();
    this.Settings = {};

    // Load settings from localStorage
    this.Settings["known_hosts"] = this.localStorage.getItem('known_hosts', {
      "rpi2-clm.ad.ghanima.net": {}
    });

    // If "known_hosts" was loaded from localStorage it will be a string, not an
    //  array.
    if ((typeof this.Settings["known_hosts"]) == "string") {
      this.Settings["known_hosts"] = JSON.parse(this.Settings["known_hosts"]);
    }

    // Turn the array of "known_hosts" into actual LXCHost objects.
    for (var index in this.Settings["known_hosts"]) {
      console.log(typeof this.Settings["known_hosts"])
      var ThisHost = this.Settings["known_hosts"][index];
      var NewHost = new LXCHost(index)
      //TODO: Set NewHost's properties
      this.LXCHosts.add(NewHost);
    }

    // Start the background workers
    this.UpdateNodeStatusTimer = setInterval((function() {
      this.StartUpdateNodeStatus();
    }).bind(this), 5000);
  }

  // Graceful shutdown handler
  graceful_shutdown(options, err) {
    // Stop updating node status
    clearInterval(this.UpdateNodeStatusTimer);

    // Save settings to disk.
    for (let index in this.Settings) {
      this.localStorage.setItem(index, this.Settings[index]);
    }
    console.log("LXDManagementServer shut down.");
  }

  // Define class functions
  StartUpdateNodeStatus() {
    console.log("Checking status of LXD hosts...");
    console.log("" + this.LXCHosts);
  }
}

module.exports = LXDManagementServer;
