// This will enable all verbose messages generated by this file
console.verbose.filterObjects.push("components.wikipages.js");

// This filter takes a "page" object and runs it through the appropraite
//  functions to convert it from Markdown to HTML
irulanclient.filter('markdownRenderer', function filter$markdownRenderer() {
  return function(page) {
    var renderer = new marked.Renderer();
    var lexer = new marked.Lexer({});
    //console.log(lexer.rules);
    //console.log(renderer)
    renderer.link = function(href, title, text) {
      if (title == null) {
        title = page.name;
      }
      if (/:\/\//.test(href)) {
        console.verbose("absolute uri: " + href);
      }
      else if (/^\/\//.test(href)) {
        console.verbose("absolute uri (relative protocol): " + href);
      }
      else if (/^\//.test(href)) {
        console.verbose("relative uri (to site base): " + href);
      }
      else {
        console.verbose("relative uri: " + href);
        var base = page.name.split("/", 2)[0];
        //var relativeName = page.name.split(":", 2)[1];
        href = "/" + base + "/" + href
        console.verbose(href);
      }
      return '<a href="'+ href + '" title="' + title + '">' + text + '</a>';
    }
    var context = [];
    context.titleExtracted = false;
    context.page = page;
    renderer.heading = (function(string, level) {
      if ((level < 3) && (!context.titleExtracted)) {
        context.page.title = string;
        context.titleExtracted = true;
        return "";
      }
      else {
        level = level + 2;
        return '<h' + level + '>' + string + '</h' + level + '>';
      }
    }).bind(context);

    return marked(page.content, {renderer: renderer});
  }
});

irulanclient.service('WikiPages', ['WikiPage', function service$WikiPages(WikiPage) {

}]);

irulanclient.factory('WikiPage', ['Page', '$resource', function(Page, $resource) {
  console.verbose("WikiPage")
  console.verbose(Page)

  // A WikiPage object is just an extension of the PageObject object.
  var WikiPageObject = function() {
    Page.getNew.apply(this);
    this.type = "Wikipage"
  }

  WikiPageObject.prototype.resource = $resource('/pages/wiki/:name');
  WikiPageObject.prototype.get = function(options, callback) {
    console.verbose(this);

    this.callback = callback;
    this.name = options.name;

    // We need to remove the "wiki:" from the start of the requested page
    //  name.
    options.name = options.name.replace(/^wiki\//i, "");
    console.verbose("will request: " + options.name);

    // Make the http call
    this.resource.get(options, (function(value) {
      console.verbose(value);
      console.verbose(this);
      this.content = value.content;
      this.sourceFormat = value.sourceFormat;
      this.returnedJson = value;
      this.callback(this);
    }).bind(this), (function(res){
      console.verbose("everything went to hell");
      console.verbose(res);
    }));
    console.log(this);
    return this;
  };

  return {
    getNew: function() { return new WikiPageObject },
  };
}]);
