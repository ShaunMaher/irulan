var fs = require("fs");
var path = require("path");

module.exports = SinglePageApplication;
module.exports.IndexPage = IndexPage;
module.exports.ErrorPage = ErrorPage;
module.exports.InjectClientScripts = InjectClientScripts;

//var viewsDirectory = '';
var global_settings = {};

// Constructor
function SinglePageApplication(_global_settings, router) {
  global_settings = _global_settings;

  // Inject the client side scripts we'll need
  global_settings['client scripts']['single page application'].push({
    name: 'angular.min.js',
    online_url: '//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js',
    offline_path: global_settings['cachedJsDir'] + '/angular.min.js'
  })
  global_settings['client scripts']['single page application'].push({
    name: 'angular-sanitize.min.js',
    online_url: '//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-sanitize.min.js',
    offline_path: global_settings['cachedJsDir'] + '/angular-sanitize.min.js'
  })
  global_settings['client scripts']['single page application'].push({
    name: 'angular-route.min.js',
    online_url: '//cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.8/angular-route.min.js',
    offline_path: global_settings['cachedJsDir'] + '/angular-route.min.js'
  })
  global_settings['client scripts']['single page application'].push({
    name: 'jquery.min.js',
    online_url: '//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js',
    offline_path: global_settings['cachedJsDir'] + '/jquery.min.js'
  })
  global_settings['client scripts']['single page application'].push({
    name: 'bootstrap.min.js',
    online_url: '//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js',
    offline_path: global_settings['cachedJsDir'] + '/bootstrap.min.js'
  })
  global_settings['client scripts']['single page application'].push({
    name: 'angular-resource.min.js',
    online_url: '//cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.8/angular-resource.min.js',
    offline_path: global_settings['cachedJsDir'] + '/angular-resource.min.js'
  })

  // Register the fact that we will be handling requests for "/" (i.e.
  //  index.html)
  router.get("/", function (req, res) {
    IndexPage(req, res);
  });

  // We also want a chance to provide any ".js" files the client requests
  router.get(/\.js$/, function (req, res, next) {
    console.log(".js file request: " + req._parsedUrl.path)
    SendScript(req, res, next);
  });
}

// Take all of the objects in "global_settings['client scripts']" and generate
//  the HTML that needs to be injected into the HTML page.
function InjectClientScripts() {
  var html = '';
  for (index in global_settings['client scripts']['single page application']) {
    script = global_settings['client scripts']['single page application'][index];
    if (global_settings['offline mode']) {
      if (!("offline_path" in script)) {
        if (("online_url" in script)) {
          console.log('We are in offline mode but no offline path for "' + script.name + '" is provided.');
          html += '<script src="' + script.online_url + '"></script>\n';
        }
        else {
          console.log('Neither an online_url or offline_path was available for "' + script.name + '".');
        }
      }
      else {
        html += '<script src="/' + script.name + '"></script>\n';
      }
    }
    else if (("online_url" in script)) {
      html += '<script src="' + script.online_url + '"></script>\n';
    }
    else if (("offline_path" in script)) {
      html += '<script src="/' + script.name + '"></script>\n';
    }
    else {
      console.log('Neither an online_url or offline_path was available for "' + script.name + '".');
    }
  }
  return html;
}

function SendScript(req, res, next) {
  //TODO: This always goes to "next()".  Finish writing it!
  requestedScript = path.basename(req._parsedUrl.path);
  if (requestedScript == 'all.js') {
    //TODO: merge all of the script files into one and send
  }
  else {
    for (index in global_settings['client scripts']['single page application']) {
      script = global_settings['client scripts']['single page application'][index];
      if (script.name == requestedScript) {
        console.log('Should send file from ' + script.offline_path);
      }
    }
  }
  next();
}

function IndexPage(req, res) {
  console.log("IndexPage");
  res.sendFile(global_settings['views directory'] + "index.html");
}

function ErrorPage(req, res, error_num, error_text) {
  res.sendFile(global_settings['views directory'] + "404.html");
}
