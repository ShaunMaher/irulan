"use strict";
var fs = require("fs");
var path = require("path");

var LocalStorage = class {
  constructor() {
    // We want as much chance as possible to catch the calling module and 10
    //  lines (the default) might not be enough.
    Error.stackTraceLimit = 50;

    // Load the localStorage module if there isn't one built in.
    if (typeof localStorage === "undefined" || localStorage === null) {
      var localStorage = new require('node-localstorage').LocalStorage('./conf/');
    }
    this.localStorage = localStorage;

    //console.log("modular-localstorage startup caller: ", this._callingFile());
    this.rootCaller = this._callingFile();
  }

  getItem(key, defaultValue) {
    let callingModulePrefix = this._callingModulePrefix();
    //console.log("getItem: callingModulePrefix: " + callingModulePrefix);

    if (this.localStorage.getItem(callingModulePrefix + key) === null) {
      return defaultValue;
    }
    else {
      return this.localStorage.getItem(callingModulePrefix + key);
    }
  }

  setItem(key, value) {
    let callingModulePrefix = this._callingModulePrefix();
    //console.log("setItem: callingModulePrefix: " + callingModulePrefix);
    if ((typeof value) == "object") {
      value = JSON.stringify(value);
    }
    return this.localStorage.setItem(callingModulePrefix + key, value);
  }

  _callingFile() {
    try {
      throw new Error();
    }
    catch (e) {
      let callingFile = '';
      for (let line of e.stack.split('\n')) {
        let traceFileName = this._traceFileName(line);
        if (traceFileName) {
          if (traceFileName !== null) {
            if (traceFileName != __filename) {
              if (!traceFileName.match(/module\.js/)) {
                //if (this.rootCaller) {
                //  if (traceFileName != this.rootCaller) {
                //    return traceFileName;
                //  }
                //}
                //else {
                  return traceFileName;
                //}
              }
            }
          }
        }
      }
      return callingFile;
    }
  }

  _traceFileName(line) {
    let callingFileName = (line.split(/\(/))[1];
    if (callingFileName) {
      callingFileName = (callingFileName.split(/\)/))[0];
      if (callingFileName) {
        callingFileName = (callingFileName.split(/:/))[0];
        return callingFileName;
      }
    }
    return null;
  }

  _callingModule(filename) {
    let callingModule = '';
    let callingFile = '';
    if (filename !== null) {
      callingFile = this._callingFile();
    }
    return callingModule = path.basename(path.dirname(callingFile));
  }

  _callingModulePrefix() {
    let modulePrefix = '';
    let callingFile = this._callingFile();
    let callingModule = this._callingModule(callingFile);

    if (callingFile != this.rootCaller) {
      return callingModule + ".";
    }
    else {
      return '';
    }
  }
}

module.exports = new LocalStorage();
